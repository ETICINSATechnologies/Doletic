<?php

require_once "interfaces/AbstractDBObject.php";
require_once "interfaces/AbstractObjectServices.php";
require_once "objects/DBTable.php"; 

/**
 *	@brief The Template class
 */
class Template implements \JsonSerializable {
	
	// -- consts

	// -- attributes
	// --- persistent
	private $id;
	...

	/**
	*	@brief Constructs a template
	*/
	public function __construct($id, ...) {
		$this->id = $id;
		...
	}

	public function jsonSerialize() {
		return [
			TemplateDBObject::COL_ID => $this->id,
			...
		];
	}

	/**
	*	@brief Returns template id
	*	@return string
	*/
	public function GetId() {
		return $this->id;
	}
	...
}


class TemplateServices extends AbstractObjectServices {

	// -- consts
	// --- params keys
	const PARAM_ID 		= "id";
	...
	// --- internal services (actions)
	const GET_TEMPLATE_BY_ID   = "byid";
	const GET_ALL_TEMPLATES 	 = "all";
	const INSERT			 = "insert";
	const UPDATE			 = "update";
	const DELETE			 = "delete";
	// -- functions

	// -- construct
	public function __construct($currentUser, $dbObject, $dbConnection) {
		parent::__construct($currentUser, $dbObject, $dbConnection);
	}

	public function GetResponseData($action, $params) {
		$data = null;
		if(!strcmp($action, TemplateServices::GET_TEMPLATE_BY_ID)) {
			$data = $this->__get_template_by_id($params[TemplateServices::PARAM_ID]);
		} else if(!strcmp($action, TemplateServices::GET_ALL_TEMPLATES)) {
			$data = $this->__get_all_templates();
		} else if(!strcmp($action, TemplateServices::INSERT)) {
			$data = $this->__insert_template(
				...);
		} else if(!strcmp($action, TemplateServices::UPDATE)) {
			$data = $this->__update_template(
				$params[TemplateServices::PARAM_ID],
				...);
		} else if(!strcmp($action, TemplateServices::DELETE)) {
			$data = $this->__delete_template($params[TemplateServices::PARAM_ID]);
		}
		return $data;
	}

# PROTECTED & PRIVATE ####################################################

	// -- consult

	private function __get_template_by_id($id) {
		// create sql params array
		$sql_params = array(":".TemplateDBObject::COL_ID => $id);
		// create sql request
		$sql = parent::getDBObject()->GetTable(TemplateDBObject::TABL_TEMPLATE)->GetSELECTQuery(
			array(DBTable::SELECT_ALL), array(TemplateDBObject::COL_ID));
		// execute SQL query and save result
		$pdos = parent::getDBConnection()->ResultFromQuery($sql, $sql_params);
		// create template var
		$template = null;
		if($pdos != null) {
			if( ($row = $pdos->fetch()) !== false) {
				$template = new Template(
					$row[TemplateDBObject::COL_ID], 
					...);
			}
		}
		return $template;
	}

	private function __get_all_templates() {
		// create sql request
		$sql = parent::getDBObject()->GetTable(TemplateDBObject::TABL_TEMPLATE)->GetSELECTQuery();
		// execute SQL query and save result
		$pdos = parent::getDBConnection()->ResultFromQuery($sql, array());
		// create an empty array for templates and fill it
		$templates = array();
		if($pdos != null) {
			while( ($row = $pdos->fetch()) !== false) {
				array_push($templates, new Template(
					$row[TemplateDBObject::COL_ID], 
					...));
			}
		}
		return $templates;
	}

	// -- modify

	private function __insert_template($name, $version, $authors, $dependencies, $enabled) {
		// create sql params
		$sql_params = array(
			":".TemplateDBObject::COL_ID => "NULL",
			...);
		// create sql request
		$sql = parent::getDBObject()->GetTable(TemplateDBObject::TABL_TEMPLATE)->GetINSERTQuery();
		// execute query
		return parent::getDBConnection()->PrepareExecuteQuery($sql, $sql_params);
	} 

	private function __update_template($id, $name, $version, $authors, $dependencies, $enabled) {
		// create sql params
		$sql_params = array(
			":".TemplateDBObject::COL_ID => $id,
			...);
		// create sql request
		$sql = parent::getDBObject()->GetTable(TemplateDBObject::TABL_TEMPLATE)->GetUPDATEQuery();
		// execute query
		return parent::getDBConnection()->PrepareExecuteQuery($sql, $sql_params);
	}

	private function __delete_template($id) {
		// create sql params
		$sql_params = array(":".TemplateDBObject::COL_ID => $id);
		// create sql request
		$sql = parent::getDBObject()->GetTable(TemplateDBObject::TABL_TEMPLATE)->GetDELETEQuery();
		// execute query
		return parent::getDBConnection()->PrepareExecuteQuery($sql, $sql_params);
	}

# PUBLIC RESET STATIC DATA FUNCTION --------------------------------------------------------------------

	public function ResetStaticData() {
		// default templates if needed
	}
}

/**
 *	@brief Template object interface
 */
class TemplateDBObject extends AbstractDBObject {

	// -- consts
	// --- object name
	const OBJ_NAME = "template";
	// --- tables
	const TABL_TEMPLATE = "dol_template";
	// --- columns
	const COL_ID = "id";
	...
	// -- attributes

	// -- functions

	public function __construct() {
		// -- construct parent
		parent::__construct(TemplateDBObject::OBJ_NAME);
		// -- create tables
		// --- dol_template table
		$dol_template = new DBTable(TemplateDBObject::TABL_TEMPLATE);
		$dol_template->AddColumn(TemplateDBObject::COL_ID, DBTable::DT_INT, 11, false, "", true, true);
		...

		// -- add tables
		parent::addTable($dol_template);
	}

	/**
	 *	@brief Returns all services associated with this object
	 */
	public function GetServices($currentUser) {
		return new TemplateServices($currentUser, $this, $this->getDBConnection());
	}

	/**
	 *	Initialize static data
	 */
	public function ResetStaticData() {
		$services = new TemplateServices(null, $this, $this->getDBConnection());
		$services->ResetStaticData();
	}

}